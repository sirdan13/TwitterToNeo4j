/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package utilities;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

import org.neo4j.driver.v1.Record;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;

import stream_data.GraphDBManager;

/**
 *
 * @author daniele
 */
public class SubjectHashtags extends javax.swing.JFrame {

    private static int indice = 0;
    static List<Subject> subjects = new ArrayList<>();
    
    
    /**
     * Creates new form SubjectHashtags
     */
    public SubjectHashtags() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        userName = new javax.swing.JLabel();
        screenName = new javax.swing.JLabel();
        profilePic = new javax.swing.JLabel();
        leftArrowButton = new javax.swing.JButton();
        rightArrowButton = new javax.swing.JButton();
        caricaRisultati = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(550, 200));

        userName.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        userName.setForeground(new java.awt.Color(153, 0, 0));
        userName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userName.setText("UserName");

        screenName.setFont(new java.awt.Font("Calibri", 2, 21)); // NOI18N
        screenName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        screenName.setText("Screen_name");

        profilePic.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        leftArrowButton.setBackground(new java.awt.Color(204, 204, 255));
        leftArrowButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\daniele\\workspace\\TwitterToNeo4j\\config\\left arrow.png")); // NOI18N
        leftArrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftArrowButtonActionPerformed(evt);
            }
        });

        rightArrowButton.setBackground(new java.awt.Color(204, 204, 255));
        rightArrowButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\daniele\\workspace\\TwitterToNeo4j\\config\\right arrow.png")); // NOI18N
        rightArrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightArrowButtonActionPerformed(evt);
            }
        });

        caricaRisultati.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        caricaRisultati.setText("Carica risultati");
        caricaRisultati.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caricaRisultatiActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Calibri", 0, 21)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "N.", "Hashtags", "Citazioni"
            }
        ));
        jTable1.setCellSelectionEnabled(true);
        jTable1.setRowHeight(22);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(324, 324, 324)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(screenName, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(407, 407, 407)
                        .addComponent(profilePic, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(leftArrowButton)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(276, 276, 276)
                        .addComponent(caricaRisultati))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(rightArrowButton)
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userName)
                .addGap(7, 7, 7)
                .addComponent(screenName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(profilePic, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(caricaRisultati)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(leftArrowButton)
                            .addComponent(rightArrowButton))
                        .addGap(0, 250, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void caricaRisultatiActionPerformed(java.awt.event.ActionEvent evt) {                                                
       Subject subject = subjects.get(0);
        caricaRisultati.setVisible(false);
        userName.setText(subject.getName());
        screenName.setText("@"+subject.getScreen_name());
        try {
            profilePic.setIcon(new ImageIcon(new URL(subject.getProfilePicURL())));
        } catch (MalformedURLException ex) {
            Logger.getLogger(SubjectHashtags.class.getName()).log(Level.SEVERE, null, ex);
        }
        fillTable(subject);
       
    }                                               

    private void rightArrowButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if(subjects.size()==1)
            return;
        if(indice<subjects.size()-1)
            indice++;
        else
            if(indice==subjects.size()-1)
                indice=0;
        clearTable();
        Subject subject = subjects.get(indice);
        try {
            profilePic.setIcon(new ImageIcon(new URL(subject.getProfilePicURL())));
        } catch (MalformedURLException ex) {
            Logger.getLogger(SubjectHashtags.class.getName()).log(Level.SEVERE, null, ex);
        }
        screenName.setText("@"+subject.getScreen_name());
        userName.setText(subject.getName());
        fillTable(subject);
        
    }                                                

    private void leftArrowButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        if(subjects.size()==1)
            return;
        if(indice==0)
            indice=subjects.size()-1;
        else
            indice--;
        clearTable();
        Subject subject = subjects.get(indice);
        try {
            profilePic.setIcon(new ImageIcon(new URL(subject.getProfilePicURL())));
        } catch (MalformedURLException ex) {
            Logger.getLogger(SubjectHashtags.class.getName()).log(Level.SEVERE, null, ex);
        }
        screenName.setText("@"+subject.getScreen_name());
        userName.setText(subject.getName());
        fillTable(subject);
    }                                               

    private void fillTable(Subject subject){
         for(int i = 0; i<subject.getHashtagsAndFreq().size(); i++){
            for(int j = 0; j<3; j++){
                if(j==0)
                    jTable1.setValueAt(i+1, i, j);
                if(j==1)
                    jTable1.setValueAt("#"+subject.getHashtagsAndFreq().get(i).getHashtag(), i, j);
                if(j==2)
                    jTable1.setValueAt(subject.getHashtagsAndFreq().get(i).getFrequence(), i, j);
            }
        }
    }
    
    private void clearTable(){
        for(int i = 0;i<jTable1.getRowCount();i++)
            for(int j = 0;j<3;j++)
                jTable1.setValueAt("", i, j);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        String topic = args[0];
    	List<String> screen_names = new ArrayList<>();
    	for(int i = 1; i<args.length; i++)
    		screen_names.add(args[i]);
    	GraphDBManager gdbm = new GraphDBManager();
    	Session session = gdbm.getSession();
    	subjects = new ArrayList<>();
    	for(String s : screen_names){
    		String query = "MATCH (u:User) WHERE u.screen_name='"+s+"' RETURN u.name, u.profileImage";
    		StatementResult sr = session.run(query);
    		if(sr.hasNext()){
                    Record r = sr.next();
                    Subject subject = new Subject(r.get(0).asString(), s, r.get(1).asString());
    		List<HashtagAndFreq> htAndFreq = new ArrayList<>();
    		query = "\n MATCH (h:Hashtag)<-[r]-(t:Tweet)-[:MENTIONS]->(u:User) "
    				+ "\n WHERE u.screen_name='"+s+"' and not (t)-[:RETWEETS]->() "
    				+ "\n RETURN h.tag as ht, count(r) as num_tags "
    				+ "\n ORDER BY count(r) desc "
    				+ "\n LIMIT 10 ";
    		sr = session.run(query);
    		while(sr.hasNext()){
    			r = sr.next();
    			htAndFreq.add(new HashtagAndFreq(r.get("ht").asString(), r.get("num_tags").asInt()));
    		}
    		subject.setHashtagsAndFreq(htAndFreq);
    		subjects.add(subject);
                }
    		
    	}
    	
    	
        
        
        
        /* Set the Nimbus look and feel */
        
        
           try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SubjectHashtags.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SubjectHashtags().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton caricaRisultati;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton leftArrowButton;
    private javax.swing.JLabel profilePic;
    private javax.swing.JButton rightArrowButton;
    private javax.swing.JLabel screenName;
    private javax.swing.JLabel userName;
    // End of variables declaration                   
}
